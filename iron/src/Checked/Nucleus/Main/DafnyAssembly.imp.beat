//-private-import BaseSpec;
//-private-import MemorySpec;
//-private-import IoTypesSpec;
//-private-import MachineStateSpec;
//-private-import AssemblySpec;
//-private-import InterruptsSpec;
//-private-import IoSpec;
//-<NuBuild AddBoogieAxiom Base_axioms />
//-<NuBuild AddBoogieAxiom Word_axioms />
//-<NuBuild AddBoogieAxiom Memory_axioms />
//-<NuBuild AddBoogieAxiom Assembly_axioms />
//-<NuBuild AddBoogieAxiom Io_axioms />
//-private-import Core;
//-private-import LogicalAddressing;
//-private-import Overflow;
//-private-import Util;
//-private-import Stacks;
//-private-import Partition;
//-private-import Instructions;
//-private-import Separation;
//-private-import IntLemmasBase;
//-private-import IntLemmasGc;
//-private-import SimpleGcMemory;
//-private-import SimpleCommon;
//-private-import SimpleCollector;
//-private-import IoMain;
//-private-import IntLemmasMain;
//-private-basmonly-import Trusted;
//-private-basmonly-import Checked;
//-private-import Heap;
//-private-import Seq;
//-private-import dafny_DafnyPrelude;

module implementation DafnyAssembly
{
implementation lemma_fun_ensures_fun_asm__Add() {}
implementation lemma_fun_ensures_fun_asm__Sub() {}
implementation lemma_fun_ensures_fun_asm__Mul() {}
implementation lemma_fun_ensures_fun_asm__Div() {}
implementation lemma_fun_ensures_fun_asm__Mod() {}

implementation lemma_fun_ensures_fun_asm__LeftShift()
{
    forall $ghost_x:int, $ghost_amount:int::{fun_asm__LeftShift($ghost_x, $ghost_amount)}{trigger_fun_asm__LeftShift($ghost_x, $ghost_amount)}trigger_fun_asm__LeftShift($ghost_x, $ghost_amount) ==> (true && (fun_word32($ghost_x)) && ((INTERNAL_le_boogie(0, $ghost_amount)) && (INTERNAL_lt_boogie($ghost_amount, 32)))) ==> (true && (fun_word32(fun_asm__LeftShift($ghost_x, $ghost_amount))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__LeftShift($ghost_x, $ghost_amount))} ((INTERNAL_le_boogie(32 - $ghost_amount, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32))) ==> ((fun_IntBit($ghost_i, fun_asm__LeftShift($ghost_x, $ghost_amount))) == (false)))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__LeftShift($ghost_x, $ghost_amount))} ((INTERNAL_le_boogie(0, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32 - $ghost_amount))) ==> ((fun_IntBit($ghost_i, fun_asm__LeftShift($ghost_x, $ghost_amount))) == (fun_IntBit($ghost_i + $ghost_amount, $ghost_x))))))
    {
        call axiom_shl($ghost_x, $ghost_amount);
        call reveal_WORD_HI();
    }
}

implementation lemma_fun_ensures_fun_asm__RightShift()
{
    forall $ghost_x:int, $ghost_amount:int::{fun_asm__RightShift($ghost_x, $ghost_amount)}{trigger_fun_asm__RightShift($ghost_x, $ghost_amount)}trigger_fun_asm__RightShift($ghost_x, $ghost_amount) ==> (true && (fun_word32($ghost_x)) && ((INTERNAL_le_boogie(0, $ghost_amount)) && (INTERNAL_lt_boogie($ghost_amount, 32)))) ==> (true && (fun_word32(fun_asm__RightShift($ghost_x, $ghost_amount))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__RightShift($ghost_x, $ghost_amount))} ((INTERNAL_le_boogie(0, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, $ghost_amount))) ==> ((fun_IntBit($ghost_i, fun_asm__RightShift($ghost_x, $ghost_amount))) == (false)))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__RightShift($ghost_x, $ghost_amount))} ((INTERNAL_le_boogie($ghost_amount, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32))) ==> ((fun_IntBit($ghost_i, fun_asm__RightShift($ghost_x, $ghost_amount))) == (fun_IntBit($ghost_i - $ghost_amount, $ghost_x)))))) 
    {
        call axiom_shr($ghost_x, $ghost_amount);
        call reveal_WORD_HI();
    }
}

implementation lemma_fun_ensures_fun_asm__RotateLeft()
{
    forall $ghost_x:int, $ghost_amount:int::{fun_asm__RotateLeft($ghost_x, $ghost_amount)}{trigger_fun_asm__RotateLeft($ghost_x, $ghost_amount)}trigger_fun_asm__RotateLeft($ghost_x, $ghost_amount) ==> (true && (fun_word32($ghost_x)) && ((INTERNAL_le_boogie(0, $ghost_amount)) && (INTERNAL_lt_boogie($ghost_amount, 32)))) ==> (true && (fun_word32(fun_asm__RotateLeft($ghost_x, $ghost_amount))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__RotateLeft($ghost_x, $ghost_amount))} ((INTERNAL_le_boogie(0, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32 - $ghost_amount))) ==> ((fun_IntBit($ghost_i, fun_asm__RotateLeft($ghost_x, $ghost_amount))) == (fun_IntBit($ghost_i + $ghost_amount, $ghost_x))))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__RotateLeft($ghost_x, $ghost_amount))} ((INTERNAL_le_boogie(32 - $ghost_amount, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32))) ==> ((fun_IntBit($ghost_i, fun_asm__RotateLeft($ghost_x, $ghost_amount))) == (fun_IntBit($ghost_i - (32 - $ghost_amount), $ghost_x))))))
    {
        call axiom_rol($ghost_x, $ghost_amount);
        call reveal_WORD_HI();
    }
}

implementation lemma_fun_ensures_fun_asm__RotateRight()
{
    forall $ghost_x:int, $ghost_amount:int::{fun_asm__RotateRight($ghost_x, $ghost_amount)}{trigger_fun_asm__RotateRight($ghost_x, $ghost_amount)}trigger_fun_asm__RotateRight($ghost_x, $ghost_amount) ==> (true && (fun_word32($ghost_x)) && ((INTERNAL_le_boogie(0, $ghost_amount)) && (INTERNAL_lt_boogie($ghost_amount, 32)))) ==> (true && (fun_word32(fun_asm__RotateRight($ghost_x, $ghost_amount))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__RotateRight($ghost_x, $ghost_amount))} ((INTERNAL_le_boogie(0, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, $ghost_amount))) ==> ((fun_IntBit($ghost_i, fun_asm__RotateRight($ghost_x, $ghost_amount))) == (fun_IntBit((32 - $ghost_amount) + $ghost_i, $ghost_x))))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__RotateRight($ghost_x, $ghost_amount))} ((INTERNAL_le_boogie($ghost_amount, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32))) ==> ((fun_IntBit($ghost_i, fun_asm__RotateRight($ghost_x, $ghost_amount))) == (fun_IntBit($ghost_i - $ghost_amount, $ghost_x))))))
    {
        call axiom_ror($ghost_x, $ghost_amount);
        call reveal_WORD_HI();
    }
}

implementation lemma_fun_ensures_fun_asm__BitwiseNot()
{
    forall $ghost_x:int::{fun_asm__BitwiseNot($ghost_x)}
        (true && (fun_word32($ghost_x))) ==> (true && (fun_word32(fun_asm__BitwiseNot($ghost_x))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__BitwiseNot($ghost_x))} ((INTERNAL_le_boogie(0, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32))) ==> ((fun_IntBit($ghost_i, fun_asm__BitwiseNot($ghost_x))) == ((!(fun_IntBit($ghost_i, $ghost_x))))))))
    {
        call axiom_neg($ghost_x);
        call reveal_WORD_HI();
    }
}

implementation lemma_fun_ensures_fun_asm__BitwiseAnd()
{
    forall $ghost_x:int, $ghost_y:int::{fun_asm__BitwiseAnd($ghost_x, $ghost_y)}
        (true && (fun_word32($ghost_x)) && (fun_word32($ghost_y))) ==> (true && (fun_word32(fun_asm__BitwiseAnd($ghost_x, $ghost_y))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__BitwiseAnd($ghost_x, $ghost_y))} ((INTERNAL_le_boogie(0, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32))) ==> ((fun_IntBit($ghost_i, fun_asm__BitwiseAnd($ghost_x, $ghost_y))) == ((fun_IntBit($ghost_i, $ghost_x)) && (fun_IntBit($ghost_i, $ghost_y)))))))
    {
        call axiom_and($ghost_x, $ghost_y);
        call reveal_WORD_HI();
    }
}

implementation lemma_fun_ensures_fun_asm__BitwiseOr()
{
    forall $ghost_x:int, $ghost_y:int::{fun_asm__BitwiseOr($ghost_x, $ghost_y)}
        (true && (fun_word32($ghost_x)) && (fun_word32($ghost_y))) ==> (true && (fun_word32(fun_asm__BitwiseOr($ghost_x, $ghost_y))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__BitwiseOr($ghost_x, $ghost_y))} ((INTERNAL_le_boogie(0, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32))) ==> ((fun_IntBit($ghost_i, fun_asm__BitwiseOr($ghost_x, $ghost_y))) == ((fun_IntBit($ghost_i, $ghost_x)) || (fun_IntBit($ghost_i, $ghost_y)))))))
    {
        call axiom_or($ghost_x, $ghost_y);
        call reveal_WORD_HI();
    }
}

implementation lemma_fun_ensures_fun_asm__BitwiseXor()
{
    forall $ghost_x:int, $ghost_y:int::{fun_asm__BitwiseXor($ghost_x, $ghost_y)}
        (true && (fun_word32($ghost_x)) && (fun_word32($ghost_y))) ==> (true && (fun_word32(fun_asm__BitwiseXor($ghost_x, $ghost_y))) && ((forall $ghost_i:int :: {fun_IntBit($ghost_i, fun_asm__BitwiseXor($ghost_x, $ghost_y))} ((INTERNAL_le_boogie(0, $ghost_i)) && (INTERNAL_lt_boogie($ghost_i, 32))) ==> ((fun_IntBit($ghost_i, fun_asm__BitwiseXor($ghost_x, $ghost_y))) == ((fun_IntBit($ghost_i, $ghost_x)) != (fun_IntBit($ghost_i, $ghost_y)))))))
    {
        call axiom_xor($ghost_x, $ghost_y);
        call reveal_WORD_HI();
    }
}

implementation proc_asm__Add(my r_old:regs, $ghost_x:int, $ghost_y:int, $opn_x:int, $opn_y:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call reveal_WORD_HI();
    call reveal_wrap32($ghost_x + $ghost_y);
    call r := instr_Add(r, $opn_x, $opn_y);
    $ghost___result := fun_asm__Add($ghost_x, $ghost_y);
}

implementation proc_asm__Sub(my r_old:regs, $ghost_x:int, $ghost_y:int, $opn_x:int, $opn_y:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call reveal_WORD_HI();
    call reveal_wrap32($ghost_x - $ghost_y);
    call r := instr_Sub(r, $opn_x, $opn_y);
    $ghost___result := fun_asm__Sub($ghost_x, $ghost_y);
}

implementation Proc_asm__Mul(my r_old:regs, const my core_state:core_state, linear stk_old:mem, linear statics_old:mem, linear io_old:IOState, linear mems_old:mems, $commonVars_old:commonVars, $gcVars_old:gcVars, $toAbs_old:[int]int, $absMem_old:[int][int]int, $stacksFrames_old:[int]Frames, objLayouts_old:[int]ObjLayout, heap_old:Heap, $ghost_x:int, $ghost_y:int)
    returns(my r:regs, linear stk:mem, linear statics:mem, linear io:IOState, linear mems:mems, $commonVars:commonVars, $gcVars:gcVars, $toAbs:[int]int, $absMem:[int][int]int, $stacksFrames:[int]Frames, objLayouts:[int]ObjLayout, heap:Heap, $ghost___result:int)
{
    r := r_old;
    stk := stk_old;
    statics := statics_old;
    io := io_old;
    mems := mems_old;
    $commonVars := $commonVars_old;
    $gcVars := $gcVars_old;
    $toAbs := $toAbs_old;
    $absMem := $absMem_old;
    $stacksFrames := $stacksFrames_old;
    objLayouts := objLayouts_old;
    heap := heap_old;

    assert TV(esp) && TO(0) && TO(1) && TO(2) && TO(3) && TO(4);

#ifdef x64
    call eax := Load(stk, esp + 12);
    call ebx := Load(stk, esp + 16);
#else
    call eax := Load(stk, esp + 8);
    call ebx := Load(stk, esp + 12);
#endif
    call reveal_WORD_HI();
    call reveal_wrap32(eax * ebx);
    call eax, edx := MulWrap(eax, ebx);
    assert TVM($ghost_x, $ghost_y);

#ifdef x64
    call Store(inout stk, esp + 8, eax);
#else
    call Store(inout stk, esp + 4, eax);
#endif

    $ghost___result := fun_asm__Mul($ghost_x, $ghost_y);
    Return;
}

implementation proc_asm__Mul64(my r_old:regs, $ghost_x:int, $ghost_y:int, $opn_hi:int, $opn_x:int, $opn_y:opn) returns(my r:regs, $ghost_hi:int, $ghost_lo:int)
{
    r := r_old;
    call r := instr_Mul64(r, $opn_y);
    assert TVM($ghost_x, $ghost_y);
    assert TVD($ghost_x * $ghost_y, 0x100000000);
    $ghost_lo := (fun_mod0x100000000($ghost_x * $ghost_y));
    $ghost_hi := ($ghost_x * $ghost_y) div 0x100000000;
    forall ::
        $ghost_hi == Div(Mult($ghost_x, $ghost_y), 4294967296)
     && $ghost_lo == wrap32(Mult($ghost_x, $ghost_y))
    {
        call reveal_wrap32(Mult($ghost_x, $ghost_y));
    }
}

implementation Proc_asm__Div(my r_old:regs, const my core_state:core_state, linear stk_old:mem, linear statics_old:mem, linear io_old:IOState, linear mems_old:mems, $commonVars_old:commonVars, $gcVars_old:gcVars, $toAbs_old:[int]int, $absMem_old:[int][int]int, $stacksFrames_old:[int]Frames, objLayouts_old:[int]ObjLayout, heap_old:Heap, $ghost_x:int, $ghost_y:int)
    returns(my r:regs, linear stk:mem, linear statics:mem, linear io:IOState, linear mems:mems, $commonVars:commonVars, $gcVars:gcVars, $toAbs:[int]int, $absMem:[int][int]int, $stacksFrames:[int]Frames, objLayouts:[int]ObjLayout, heap:Heap, $ghost___result:int)
{
    r := r_old;
    stk := stk_old;
    statics := statics_old;
    io := io_old;
    mems := mems_old;
    $commonVars := $commonVars_old;
    $gcVars := $gcVars_old;
    $toAbs := $toAbs_old;
    $absMem := $absMem_old;
    $stacksFrames := $stacksFrames_old;
    objLayouts := objLayouts_old;
    heap := heap_old;

    assert TV(esp) && TO(0) && TO(1) && TO(2) && TO(3) && TO(4);

#ifdef x64
    call eax := Load(stk, esp + 12);
    call ebx := Load(stk, esp + 16);
#else
    call eax := Load(stk, esp + 8);
    call ebx := Load(stk, esp + 12);
#endif
    call edx := Mov(0);
    call reveal_WORD_HI();
    call reveal_wrap32(eax div ebx);
    call eax, edx := Div(eax, edx, ebx);
#ifdef x64
    call Store(inout stk, esp + 8, eax);
#else
    call Store(inout stk, esp + 4, eax);
#endif
    $ghost___result := fun_asm__Div($ghost_x, $ghost_y);
    Return;
}

implementation Proc_asm__Mod(my r_old:regs, const my core_state:core_state, linear stk_old:mem, linear statics_old:mem, linear io_old:IOState, linear mems_old:mems, $commonVars_old:commonVars, $gcVars_old:gcVars, $toAbs_old:[int]int, $absMem_old:[int][int]int, $stacksFrames_old:[int]Frames, objLayouts_old:[int]ObjLayout, heap_old:Heap, $ghost_x:int, $ghost_y:int)
    returns(my r:regs, linear stk:mem, linear statics:mem, linear io:IOState, linear mems:mems, $commonVars:commonVars, $gcVars:gcVars, $toAbs:[int]int, $absMem:[int][int]int, $stacksFrames:[int]Frames, objLayouts:[int]ObjLayout, heap:Heap, $ghost___result:int)
{
    r := r_old;
    stk := stk_old;
    statics := statics_old;
    io := io_old;
    mems := mems_old;
    $commonVars := $commonVars_old;
    $gcVars := $gcVars_old;
    $toAbs := $toAbs_old;
    $absMem := $absMem_old;
    $stacksFrames := $stacksFrames_old;
    objLayouts := objLayouts_old;
    heap := heap_old;

    assert TV(esp) && TO(0) && TO(1) && TO(2) && TO(3) && TO(4);

#ifdef x64
    call eax := Load(stk, esp + 12);
    call ebx := Load(stk, esp + 16);
#else
    call eax := Load(stk, esp + 8);
    call ebx := Load(stk, esp + 12);
#endif

    call edx := Mov(0);
    call reveal_WORD_HI();
    call reveal_wrap32(eax div ebx);
    call eax, edx := Div(eax, edx, ebx);

#ifdef x64
    call Store(inout stk, esp + 8, edx);
#else
    call Store(inout stk, esp + 4, edx);
#endif

    $ghost___result := fun_asm__Mod($ghost_x, $ghost_y);
    Return;
}

implementation proc_asm__LeftShift(my r_old:regs, $ghost_x:int, $ghost_amount:int, $opn_x:int, $opn_amount:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call r := instr_Shl(r, $opn_x, $opn_amount);
    $ghost___result := fun_asm__LeftShift($ghost_x, $ghost_amount);
    call lemma_fun_ensures_fun_asm__LeftShift();
}

implementation proc_asm__RightShift(my r_old:regs, $ghost_x:int, $ghost_amount:int, $opn_x:int, $opn_amount:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call r := instr_Shr(r, $opn_x, $opn_amount);
    $ghost___result := fun_asm__RightShift($ghost_x, $ghost_amount);
    call lemma_fun_ensures_fun_asm__RightShift();
}

implementation proc_asm__RotateLeft(my r_old:regs, $ghost_x:int, $ghost_amount:int, $opn_x:int, $opn_amount:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call r := instr_Rol(r, $opn_x, $opn_amount);
    $ghost___result := fun_asm__RotateLeft($ghost_x, $ghost_amount);
    call lemma_fun_ensures_fun_asm__RotateLeft();
}

implementation proc_asm__RotateRight(my r_old:regs, $ghost_x:int, $ghost_amount:int, $opn_x:int, $opn_amount:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call r := instr_Ror(r, $opn_x, $opn_amount);
    $ghost___result := fun_asm__RotateRight($ghost_x, $ghost_amount);
    call lemma_fun_ensures_fun_asm__RotateRight();
}

implementation proc_asm__BitwiseNot(my r_old:regs, $ghost_x:int, $opn_x:int) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call r := instr_Not(r, $opn_x);
    $ghost___result := fun_asm__BitwiseNot($ghost_x);
    call lemma_fun_ensures_fun_asm__BitwiseNot();
}

implementation proc_asm__BitwiseAnd(my r_old:regs, $ghost_x:int, $ghost_y:int, $opn_x:int, $opn_y:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call r := instr_And(r, $opn_x, $opn_y);
    $ghost___result := fun_asm__BitwiseAnd($ghost_x, $ghost_y);
    call lemma_fun_ensures_fun_asm__BitwiseAnd();
}

implementation proc_asm__BitwiseOr(my r_old:regs, $ghost_x:int, $ghost_y:int, $opn_x:int, $opn_y:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call r := instr_Or(r, $opn_x, $opn_y);
    $ghost___result := fun_asm__BitwiseOr($ghost_x, $ghost_y);
    call lemma_fun_ensures_fun_asm__BitwiseOr();
}

implementation proc_asm__BitwiseXor(my r_old:regs, $ghost_x:int, $ghost_y:int, $opn_x:int, $opn_y:opn) returns(my r:regs, $ghost___result:int)
{
    r := r_old;
    call r := instr_Xor(r, $opn_x, $opn_y);
    $ghost___result := fun_asm__BitwiseXor($ghost_x, $ghost_y);
    call lemma_fun_ensures_fun_asm__BitwiseXor();
}

}
