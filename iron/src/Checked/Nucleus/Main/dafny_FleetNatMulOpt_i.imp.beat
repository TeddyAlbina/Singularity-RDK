    //-private-import BaseSpec;
    //-private-import MemorySpec;
    //-private-import IoTypesSpec;
    //-private-import MachineStateSpec;
    //-private-import AssemblySpec;
    //-private-import InterruptsSpec;
    //-private-import IoSpec;
    //-private-import Overflow;
    //-private-import Core;
    //-private-import LogicalAddressing;
    //-private-import Util;
    //-private-import Stacks;
    //-private-import Partition;
    //-private-import Instructions;
    //-private-import Separation;
    //-private-import IntLemmasGc;
    //-private-import SimpleGcMemory;
    //-private-import SimpleCommon;
    //-private-import SimpleCollector;
    //-private-import IntLemmasMain;
    //-private-import IntLemmasBase;
    //-private-import IoMain;
    //-private-basmonly-import Trusted;
    //-private-basmonly-import Checked;
    //-private-import Heap;
    //-private-import Seq;
    //-private-import dafny_DafnyPrelude;
    //-private-import DafnyAssembly;
    //-private-import dafny_base_s;
    //-private-import dafny_power2_s;
    //-private-import dafny_bytes_and_words_s;
    //-private-import dafny_be_sequences_s;
    //-private-import dafny_integer_sequences_s;
    //-private-import dafny_seqs_simple_i;
    //-private-import dafny_power_s;
    //-private-import dafny_mul_nonlinear_i;
    //-private-import dafny_mul_i;
    //-private-import dafny_power_i;
    //-private-import dafny_div_def_i;
    //-private-import dafny_div_boogie_i;
    //-private-import dafny_div_nonlinear_i;
    //-private-import dafny_div_i;
    //-private-import dafny_repeat_digit_i;
    //-private-import dafny_assembly_s;
    //-private-import dafny_power2_i;
    //-private-import dafny_seqs_and_ints_i;
    //-private-import dafny_seqs_common_i;
    //-private-import dafny_Word32_i;
    //-private-import dafny_relational_s;
    //-private-import dafny_assembly_i;
    //-private-import dafny_arrays_i;
    //-private-import dafny_seqs_transforms_i;
    //-private-import dafny_seqs_reverse_i;
    //-private-import dafny_integer_sequences_i;
    //-private-import dafny_integer_sequences_premium_i;
    //-private-import dafny_assembly_premium_i;
    //-private-import dafny_BigNatX86Shim_i;
    //-private-import dafny_seqs_canonical_i;
    //-private-import dafny_CanonicalArrays_i;
    //-private-import dafny_FatNatCommon_i;
    //-private-import dafny_FleetNatCommon_i;
    //-private-import dafny_FleetNatAdd_i;
    //-private-import dafny_FleetNatMulLemmas_i;
//-<NuBuild AddBoogieAxiom Assembly_axioms />
//-<NuBuild AddBoogieAxiom Base_axioms />
//-<NuBuild AddBoogieAxiom Memory_axioms />
//-<NuBuild AddBoogieAxiom Word_axioms />
//-<NuBuild AddBoogieAxiom Io_axioms />

module implementation dafny_FleetNatMulOpt_i
{
implementation Proc_FleetNatMulMathOpt(my r_old:regs, const my core_state:core_state, linear stk_old:mem, linear statics_old:mem, linear io_old:IOState, linear mems_old:mems, $commonVars_old:commonVars, $gcVars_old:gcVars, $toAbs_old:[int]int, $absMem_old:[int][int]int, $stacksFrames_old:[int]Frames, objLayouts_old:[int]ObjLayout, heap_old:Heap, $ghost_aj:int, $ghost_bv:int, $ghost_lastcj:int, $ghost_lastcarry:int) returns(my r:regs, linear stk:mem, linear statics:mem, linear io:IOState, linear mems:mems, $commonVars:commonVars, $gcVars:gcVars, $toAbs:[int]int, $absMem:[int][int]int, $stacksFrames:[int]Frames, objLayouts:[int]ObjLayout, heap:Heap, $ghost_newcj:int, $ghost_newcarry:int)
{
    //- Lots of boilerplate
    var $absMem_tmp:[int][int]int;
    var objLayouts_tmp:[int]ObjLayout;
    var heap_tmp:Heap;
    var obj_tmp:int;
    var val_tmp:int;
    var $ghost_mhi:int;
    var $ghost_mlo:int;
    var $ghost__temp__0:int;
    var $ghost_add1:int;
    var $ghost_carry1:int;
    var $ghost_carry2:int;
    var $ghost_add3:int;
    var $ghost_carry3:int;
    var $ghost_carry4:int;
    var tmp:int;
    assert fun_unroll(0);
    assert fun_unroll(1);
    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___int();
    call lemma_unroll_fun____HASH_Seq__Length__FULL___int();
    call lemma_fun_ensures_fun_Seq__Length___int();
    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___int();
    call lemma_unroll_fun____HASH_Seq__Build__FULL___int();
    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___int();
    call lemma_unroll_fun____HASH_Seq__Index__FULL___int();
    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___int();
    call lemma_unroll_fun____HASH_Seq__Append__FULL___int();
    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___int();
    call lemma_unroll_fun____HASH_Seq__Update__FULL___int();
    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___int();
    call lemma_unroll_fun____HASH_Seq__Take__FULL___int();
    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___int();
    call lemma_unroll_fun____HASH_Seq__Drop__FULL___int();
    call proc_Seq__Empty__ToZero___int();
    call proc_Seq__Empty__FromZero___int();
    call proc_Seq__Singleton__Length___int();
    call proc_Seq__Build__Length___int();
    call proc_Seq__Build__Index___int();
    call proc_Seq__Append__Length___int();
    call proc_Seq__Index__Singleton___int();
    call proc_Seq__Append__Index___int();
    call proc_Seq__Update__Length___int();
    call proc_Seq__Index__Update___int();
    call proc_Seq__Equal__Equiv___int();
    call proc_Seq__Take__Length___int();
    call proc_Seq__Take__Index___int();
    call proc_Seq__Drop__Length___int();
    call proc_Seq__Drop__Index___int();
    call proc_Seq__Append__TakeDrop___int();
    call proc_Seq__Update__CommuteTake1___int();
    call proc_Seq__Update__CommuteTake2___int();
    call proc_Seq__Update__CommuteDrop1___int();
    call proc_Seq__Update__CommuteDrop2___int();
    call proc_Seq__Build__CommuteDrop___int();
    call proc_Seq__Take__Empty___int();
    call proc_Seq__Drop__Empty___int();
    call lemma_unroll_fun_Seq__FromArrayRange();
    call proc_Seq__FromArray__Length();
    call proc_Seq__FromArray__Index();
    call proc_Seq__FromArray__Update();
    call lemma_unroll_rec_fun____HASH_power2__FULL();
    call lemma_unroll_fun____HASH_power2__FULL();
    call lemma_fun_ensures_fun_power2();
    call lemma_unroll_rec_fun____HASH_BEDigitSeqToInt__private__FULL();
    call lemma_unroll_fun____HASH_BEDigitSeqToInt__private__FULL();
    call lemma_unroll_rec_fun____HASH_BEIntToDigitSeq__private__FULL();
    call lemma_unroll_fun____HASH_BEIntToDigitSeq__private__FULL();
    call lemma_unroll_rec_fun_RepeatDigit();
    call lemma_unroll_fun_RepeatDigit();
    call lemma_unroll_rec_fun____HASH_Reverse__FULL();
    call lemma_unroll_fun____HASH_Reverse__FULL();
    call lemma_unroll_rec_fun____HASH_power__FULL();
    call lemma_unroll_fun____HASH_power__FULL();
    call lemma_unroll_rec_fun_mul__pos();
    call lemma_unroll_fun_mul__pos();
    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___bool();
    call lemma_unroll_fun____HASH_Seq__Length__FULL___bool();
    call lemma_fun_ensures_fun_Seq__Length___bool();
    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___bool();
    call lemma_unroll_fun____HASH_Seq__Build__FULL___bool();
    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___bool();
    call lemma_unroll_fun____HASH_Seq__Index__FULL___bool();
    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___bool();
    call lemma_unroll_fun____HASH_Seq__Append__FULL___bool();
    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___bool();
    call lemma_unroll_fun____HASH_Seq__Update__FULL___bool();
    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___bool();
    call lemma_unroll_fun____HASH_Seq__Take__FULL___bool();
    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___bool();
    call lemma_unroll_fun____HASH_Seq__Drop__FULL___bool();
    call proc_Seq__Empty__ToZero___bool();
    call proc_Seq__Empty__FromZero___bool();
    call proc_Seq__Singleton__Length___bool();
    call proc_Seq__Build__Length___bool();
    call proc_Seq__Build__Index___bool();
    call proc_Seq__Append__Length___bool();
    call proc_Seq__Index__Singleton___bool();
    call proc_Seq__Append__Index___bool();
    call proc_Seq__Update__Length___bool();
    call proc_Seq__Index__Update___bool();
    call proc_Seq__Equal__Equiv___bool();
    call proc_Seq__Take__Length___bool();
    call proc_Seq__Take__Index___bool();
    call proc_Seq__Drop__Length___bool();
    call proc_Seq__Drop__Index___bool();
    call proc_Seq__Append__TakeDrop___bool();
    call proc_Seq__Update__CommuteTake1___bool();
    call proc_Seq__Update__CommuteTake2___bool();
    call proc_Seq__Update__CommuteDrop1___bool();
    call proc_Seq__Update__CommuteDrop2___bool();
    call proc_Seq__Build__CommuteDrop___bool();
    call proc_Seq__Take__Empty___bool();
    call proc_Seq__Drop__Empty___bool();
    call lemma_unroll_rec_fun_my__div__pos();
    call lemma_unroll_fun_my__div__pos();
    call lemma_unroll_rec_fun_my__mod__recursive();
    call lemma_unroll_fun_my__mod__recursive();
    call lemma_fun_ensures_fun_RepeatDigit__premium();
    call lemma_unroll_rec_fun____HASH_SequenceOfZeros__FULL();
    call lemma_unroll_fun____HASH_SequenceOfZeros__FULL();
    call lemma_fun_ensures_fun_SequenceOfZeros();
    call lemma_fun_ensures_fun_BitwiseAnd();
    call lemma_fun_ensures_fun_BitwiseOr();
    call lemma_fun_ensures_fun_BitwiseNot();
    call lemma_fun_ensures_fun_BitwiseXor();
    call lemma_fun_ensures_fun_RotateRight();
    call lemma_fun_ensures_fun_RotateLeft();
    call lemma_fun_ensures_fun_RightShift();
    call lemma_fun_ensures_fun_LeftShift();
    call lemma_fun_ensures_fun_Add32();
    call lemma_fun_ensures_fun_Sub32();
    call lemma_fun_ensures_fun_Mul32();
    call lemma_fun_ensures_fun_Div32();
    call lemma_fun_ensures_fun_Mod32();
    call lemma_unroll_rec_fun____HASH_NatNumBits__FULL();
    call lemma_unroll_fun____HASH_NatNumBits__FULL();
    call lemma_fun_ensures_fun_NatNumBits();
    call lemma_fun_ensures_fun_asm__Add();
    call lemma_fun_ensures_fun_asm__Sub();
    call lemma_fun_ensures_fun_asm__Mul();
    call lemma_fun_ensures_fun_asm__Div();
    call lemma_fun_ensures_fun_asm__Mod();
    call lemma_fun_ensures_fun_asm__LeftShift();
    call lemma_fun_ensures_fun_asm__RightShift();
    call lemma_fun_ensures_fun_asm__RotateLeft();
    call lemma_fun_ensures_fun_asm__RotateRight();
    call lemma_fun_ensures_fun_asm__BitwiseNot();
    call lemma_fun_ensures_fun_asm__BitwiseAnd();
    call lemma_fun_ensures_fun_asm__BitwiseOr();
    call lemma_fun_ensures_fun_asm__BitwiseXor();
    call lemma_unroll_rec_fun____HASH_LEDigitSeqToInt__private__FULL();
    call lemma_unroll_fun____HASH_LEDigitSeqToInt__private__FULL();
    call lemma_fun_ensures_fun_BEDigitSeqToInt__premium();
    call lemma_fun_ensures_fun_BEWordSeqToInt__premium();
    call lemma_fun_ensures_fun_BEIntToDigitSeq__premium();
    call lemma_fun_ensures_fun_BEIntToByteSeq__premium();
    call lemma_fun_ensures_fun_BEWordToFourBytes__premium();
    call lemma_fun_ensures_fun_BEWordToBitSeq__premium();
    call lemma_fun_ensures_fun_BEWordSeqToBitSeq__premium();
    call lemma_fun_ensures_fun_BEByteSeqToBitSeq__premium();
    call lemma_fun_ensures_fun_BEWordSeqToByteSeq__premium();
    call lemma_fun_ensures_fun_Asm__Add();
    call lemma_fun_ensures_fun_Asm__Sub();
    call lemma_fun_ensures_fun_Asm__Mul();
    call lemma_fun_ensures_fun_Asm__Div();
    call lemma_fun_ensures_fun_Asm__Mod();
    call lemma_fun_ensures_fun_Asm__LeftShift();
    call lemma_fun_ensures_fun_Asm__RightShift();
    call lemma_fun_ensures_fun_Asm__RotateLeft();
    call lemma_fun_ensures_fun_Asm__RotateRight();
    call lemma_fun_ensures_fun_Asm__BitwiseNot();
    call lemma_fun_ensures_fun_Asm__BitwiseAnd();
    call lemma_fun_ensures_fun_Asm__BitwiseOr();
    call lemma_fun_ensures_fun_Asm__BitwiseXor();
    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___Seq___int();
    call lemma_unroll_fun____HASH_Seq__Length__FULL___Seq___int();
    call lemma_fun_ensures_fun_Seq__Length___Seq___int();
    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___Seq___int();
    call lemma_unroll_fun____HASH_Seq__Build__FULL___Seq___int();
    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___Seq___int();
    call lemma_unroll_fun____HASH_Seq__Index__FULL___Seq___int();
    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___Seq___int();
    call lemma_unroll_fun____HASH_Seq__Append__FULL___Seq___int();
    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___Seq___int();
    call lemma_unroll_fun____HASH_Seq__Update__FULL___Seq___int();
    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___Seq___int();
    call lemma_unroll_fun____HASH_Seq__Take__FULL___Seq___int();
    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___Seq___int();
    call lemma_unroll_fun____HASH_Seq__Drop__FULL___Seq___int();
    call proc_Seq__Empty__ToZero___Seq___int();
    call proc_Seq__Empty__FromZero___Seq___int();
    call proc_Seq__Singleton__Length___Seq___int();
    call proc_Seq__Build__Length___Seq___int();
    call proc_Seq__Build__Index___Seq___int();
    call proc_Seq__Append__Length___Seq___int();
    call proc_Seq__Index__Singleton___Seq___int();
    call proc_Seq__Append__Index___Seq___int();
    call proc_Seq__Update__Length___Seq___int();
    call proc_Seq__Index__Update___Seq___int();
    call proc_Seq__Equal__Equiv___Seq___int();
    call proc_Seq__Take__Length___Seq___int();
    call proc_Seq__Take__Index___Seq___int();
    call proc_Seq__Drop__Length___Seq___int();
    call proc_Seq__Drop__Index___Seq___int();
    call proc_Seq__Append__TakeDrop___Seq___int();
    call proc_Seq__Update__CommuteTake1___Seq___int();
    call proc_Seq__Update__CommuteTake2___Seq___int();
    call proc_Seq__Update__CommuteDrop1___Seq___int();
    call proc_Seq__Update__CommuteDrop2___Seq___int();
    call proc_Seq__Build__CommuteDrop___Seq___int();
    call proc_Seq__Take__Empty___Seq___int();
    call proc_Seq__Drop__Empty___Seq___int();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___atoe_Type();
//    call lemma_fun_ensures_fun_Seq__Length___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___atoe_Type();
//    call proc_Seq__Empty__ToZero___atoe_Type();
//    call proc_Seq__Empty__FromZero___atoe_Type();
//    call proc_Seq__Singleton__Length___atoe_Type();
//    call proc_Seq__Build__Length___atoe_Type();
//    call proc_Seq__Build__Index___atoe_Type();
//    call proc_Seq__Append__Length___atoe_Type();
//    call proc_Seq__Index__Singleton___atoe_Type();
//    call proc_Seq__Append__Index___atoe_Type();
//    call proc_Seq__Update__Length___atoe_Type();
//    call proc_Seq__Index__Update___atoe_Type();
//    call proc_Seq__Equal__Equiv___atoe_Type();
//    call proc_Seq__Take__Length___atoe_Type();
//    call proc_Seq__Take__Index___atoe_Type();
//    call proc_Seq__Drop__Length___atoe_Type();
//    call proc_Seq__Drop__Index___atoe_Type();
//    call proc_Seq__Append__TakeDrop___atoe_Type();
//    call proc_Seq__Update__CommuteTake1___atoe_Type();
//    call proc_Seq__Update__CommuteTake2___atoe_Type();
//    call proc_Seq__Update__CommuteDrop1___atoe_Type();
//    call proc_Seq__Update__CommuteDrop2___atoe_Type();
//    call proc_Seq__Build__CommuteDrop___atoe_Type();
//    call proc_Seq__Take__Empty___atoe_Type();
//    call proc_Seq__Drop__Empty___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___Seq___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___Seq___atoe_Type();
//    call lemma_fun_ensures_fun_Seq__Length___Seq___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___Seq___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___Seq___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___Seq___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___Seq___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___Seq___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___Seq___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___Seq___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___Seq___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___Seq___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___Seq___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___Seq___atoe_Type();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___Seq___atoe_Type();
//    call proc_Seq__Empty__ToZero___Seq___atoe_Type();
//    call proc_Seq__Empty__FromZero___Seq___atoe_Type();
//    call proc_Seq__Singleton__Length___Seq___atoe_Type();
//    call proc_Seq__Build__Length___Seq___atoe_Type();
//    call proc_Seq__Build__Index___Seq___atoe_Type();
//    call proc_Seq__Append__Length___Seq___atoe_Type();
//    call proc_Seq__Index__Singleton___Seq___atoe_Type();
//    call proc_Seq__Append__Index___Seq___atoe_Type();
//    call proc_Seq__Update__Length___Seq___atoe_Type();
//    call proc_Seq__Index__Update___Seq___atoe_Type();
//    call proc_Seq__Equal__Equiv___Seq___atoe_Type();
//    call proc_Seq__Take__Length___Seq___atoe_Type();
//    call proc_Seq__Take__Index___Seq___atoe_Type();
//    call proc_Seq__Drop__Length___Seq___atoe_Type();
//    call proc_Seq__Drop__Index___Seq___atoe_Type();
//    call proc_Seq__Append__TakeDrop___Seq___atoe_Type();
//    call proc_Seq__Update__CommuteTake1___Seq___atoe_Type();
//    call proc_Seq__Update__CommuteTake2___Seq___atoe_Type();
//    call proc_Seq__Update__CommuteDrop1___Seq___atoe_Type();
//    call proc_Seq__Update__CommuteDrop2___Seq___atoe_Type();
//    call proc_Seq__Build__CommuteDrop___Seq___atoe_Type();
//    call proc_Seq__Take__Empty___Seq___atoe_Type();
//    call proc_Seq__Drop__Empty___Seq___atoe_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___atoh_Type();
//    call lemma_fun_ensures_fun_Seq__Length___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___atoh_Type();
//    call proc_Seq__Empty__ToZero___atoh_Type();
//    call proc_Seq__Empty__FromZero___atoh_Type();
//    call proc_Seq__Singleton__Length___atoh_Type();
//    call proc_Seq__Build__Length___atoh_Type();
//    call proc_Seq__Build__Index___atoh_Type();
//    call proc_Seq__Append__Length___atoh_Type();
//    call proc_Seq__Index__Singleton___atoh_Type();
//    call proc_Seq__Append__Index___atoh_Type();
//    call proc_Seq__Update__Length___atoh_Type();
//    call proc_Seq__Index__Update___atoh_Type();
//    call proc_Seq__Equal__Equiv___atoh_Type();
//    call proc_Seq__Take__Length___atoh_Type();
//    call proc_Seq__Take__Index___atoh_Type();
//    call proc_Seq__Drop__Length___atoh_Type();
//    call proc_Seq__Drop__Index___atoh_Type();
//    call proc_Seq__Append__TakeDrop___atoh_Type();
//    call proc_Seq__Update__CommuteTake1___atoh_Type();
//    call proc_Seq__Update__CommuteTake2___atoh_Type();
//    call proc_Seq__Update__CommuteDrop1___atoh_Type();
//    call proc_Seq__Update__CommuteDrop2___atoh_Type();
//    call proc_Seq__Build__CommuteDrop___atoh_Type();
//    call proc_Seq__Take__Empty___atoh_Type();
//    call proc_Seq__Drop__Empty___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___Seq___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___Seq___atoh_Type();
//    call lemma_fun_ensures_fun_Seq__Length___Seq___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___Seq___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___Seq___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___Seq___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___Seq___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___Seq___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___Seq___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___Seq___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___Seq___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___Seq___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___Seq___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___Seq___atoh_Type();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___Seq___atoh_Type();
//    call proc_Seq__Empty__ToZero___Seq___atoh_Type();
//    call proc_Seq__Empty__FromZero___Seq___atoh_Type();
//    call proc_Seq__Singleton__Length___Seq___atoh_Type();
//    call proc_Seq__Build__Length___Seq___atoh_Type();
//    call proc_Seq__Build__Index___Seq___atoh_Type();
//    call proc_Seq__Append__Length___Seq___atoh_Type();
//    call proc_Seq__Index__Singleton___Seq___atoh_Type();
//    call proc_Seq__Append__Index___Seq___atoh_Type();
//    call proc_Seq__Update__Length___Seq___atoh_Type();
//    call proc_Seq__Index__Update___Seq___atoh_Type();
//    call proc_Seq__Equal__Equiv___Seq___atoh_Type();
//    call proc_Seq__Take__Length___Seq___atoh_Type();
//    call proc_Seq__Take__Index___Seq___atoh_Type();
//    call proc_Seq__Drop__Length___Seq___atoh_Type();
//    call proc_Seq__Drop__Index___Seq___atoh_Type();
//    call proc_Seq__Append__TakeDrop___Seq___atoh_Type();
//    call proc_Seq__Update__CommuteTake1___Seq___atoh_Type();
//    call proc_Seq__Update__CommuteTake2___Seq___atoh_Type();
//    call proc_Seq__Update__CommuteDrop1___Seq___atoh_Type();
//    call proc_Seq__Update__CommuteDrop2___Seq___atoh_Type();
//    call proc_Seq__Build__CommuteDrop___Seq___atoh_Type();
//    call proc_Seq__Take__Empty___Seq___atoh_Type();
//    call proc_Seq__Drop__Empty___Seq___atoh_Type();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___CandidateSeedWorksheetRow();
//    call lemma_fun_ensures_fun_Seq__Length___CandidateSeedWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___CandidateSeedWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___CandidateSeedWorksheetRow();
//    call proc_Seq__Empty__ToZero___CandidateSeedWorksheetRow();
//    call proc_Seq__Empty__FromZero___CandidateSeedWorksheetRow();
//    call proc_Seq__Singleton__Length___CandidateSeedWorksheetRow();
//    call proc_Seq__Build__Length___CandidateSeedWorksheetRow();
//    call proc_Seq__Build__Index___CandidateSeedWorksheetRow();
//    call proc_Seq__Append__Length___CandidateSeedWorksheetRow();
//    call proc_Seq__Index__Singleton___CandidateSeedWorksheetRow();
//    call proc_Seq__Append__Index___CandidateSeedWorksheetRow();
//    call proc_Seq__Update__Length___CandidateSeedWorksheetRow();
//    call proc_Seq__Index__Update___CandidateSeedWorksheetRow();
//    call proc_Seq__Equal__Equiv___CandidateSeedWorksheetRow();
//    call proc_Seq__Take__Length___CandidateSeedWorksheetRow();
//    call proc_Seq__Take__Index___CandidateSeedWorksheetRow();
//    call proc_Seq__Drop__Length___CandidateSeedWorksheetRow();
//    call proc_Seq__Drop__Index___CandidateSeedWorksheetRow();
//    call proc_Seq__Append__TakeDrop___CandidateSeedWorksheetRow();
//    call proc_Seq__Update__CommuteTake1___CandidateSeedWorksheetRow();
//    call proc_Seq__Update__CommuteTake2___CandidateSeedWorksheetRow();
//    call proc_Seq__Update__CommuteDrop1___CandidateSeedWorksheetRow();
//    call proc_Seq__Update__CommuteDrop2___CandidateSeedWorksheetRow();
//    call proc_Seq__Build__CommuteDrop___CandidateSeedWorksheetRow();
//    call proc_Seq__Take__Empty___CandidateSeedWorksheetRow();
//    call proc_Seq__Drop__Empty___CandidateSeedWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___CandidateSeedWorksheet();
//    call lemma_fun_ensures_fun_Seq__Length___CandidateSeedWorksheet();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___CandidateSeedWorksheet();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___CandidateSeedWorksheet();
//    call proc_Seq__Empty__ToZero___CandidateSeedWorksheet();
//    call proc_Seq__Empty__FromZero___CandidateSeedWorksheet();
//    call proc_Seq__Singleton__Length___CandidateSeedWorksheet();
//    call proc_Seq__Build__Length___CandidateSeedWorksheet();
//    call proc_Seq__Build__Index___CandidateSeedWorksheet();
//    call proc_Seq__Append__Length___CandidateSeedWorksheet();
//    call proc_Seq__Index__Singleton___CandidateSeedWorksheet();
//    call proc_Seq__Append__Index___CandidateSeedWorksheet();
//    call proc_Seq__Update__Length___CandidateSeedWorksheet();
//    call proc_Seq__Index__Update___CandidateSeedWorksheet();
//    call proc_Seq__Equal__Equiv___CandidateSeedWorksheet();
//    call proc_Seq__Take__Length___CandidateSeedWorksheet();
//    call proc_Seq__Take__Index___CandidateSeedWorksheet();
//    call proc_Seq__Drop__Length___CandidateSeedWorksheet();
//    call proc_Seq__Drop__Index___CandidateSeedWorksheet();
//    call proc_Seq__Append__TakeDrop___CandidateSeedWorksheet();
//    call proc_Seq__Update__CommuteTake1___CandidateSeedWorksheet();
//    call proc_Seq__Update__CommuteTake2___CandidateSeedWorksheet();
//    call proc_Seq__Update__CommuteDrop1___CandidateSeedWorksheet();
//    call proc_Seq__Update__CommuteDrop2___CandidateSeedWorksheet();
//    call proc_Seq__Build__CommuteDrop___CandidateSeedWorksheet();
//    call proc_Seq__Take__Empty___CandidateSeedWorksheet();
//    call proc_Seq__Drop__Empty___CandidateSeedWorksheet();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___MRProbe();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___MRProbe();
//    call lemma_fun_ensures_fun_Seq__Length___MRProbe();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___MRProbe();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___MRProbe();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___MRProbe();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___MRProbe();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___MRProbe();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___MRProbe();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___MRProbe();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___MRProbe();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___MRProbe();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___MRProbe();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___MRProbe();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___MRProbe();
//    call proc_Seq__Empty__ToZero___MRProbe();
//    call proc_Seq__Empty__FromZero___MRProbe();
//    call proc_Seq__Singleton__Length___MRProbe();
//    call proc_Seq__Build__Length___MRProbe();
//    call proc_Seq__Build__Index___MRProbe();
//    call proc_Seq__Append__Length___MRProbe();
//    call proc_Seq__Index__Singleton___MRProbe();
//    call proc_Seq__Append__Index___MRProbe();
//    call proc_Seq__Update__Length___MRProbe();
//    call proc_Seq__Index__Update___MRProbe();
//    call proc_Seq__Equal__Equiv___MRProbe();
//    call proc_Seq__Take__Length___MRProbe();
//    call proc_Seq__Take__Index___MRProbe();
//    call proc_Seq__Drop__Length___MRProbe();
//    call proc_Seq__Drop__Index___MRProbe();
//    call proc_Seq__Append__TakeDrop___MRProbe();
//    call proc_Seq__Update__CommuteTake1___MRProbe();
//    call proc_Seq__Update__CommuteTake2___MRProbe();
//    call proc_Seq__Update__CommuteDrop1___MRProbe();
//    call proc_Seq__Update__CommuteDrop2___MRProbe();
//    call proc_Seq__Build__CommuteDrop___MRProbe();
//    call proc_Seq__Take__Empty___MRProbe();
//    call proc_Seq__Drop__Empty___MRProbe();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___SelectRandomRequest();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___SelectRandomRequest();
//    call lemma_fun_ensures_fun_Seq__Length___SelectRandomRequest();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___SelectRandomRequest();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___SelectRandomRequest();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___SelectRandomRequest();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___SelectRandomRequest();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___SelectRandomRequest();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___SelectRandomRequest();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___SelectRandomRequest();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___SelectRandomRequest();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___SelectRandomRequest();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___SelectRandomRequest();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___SelectRandomRequest();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___SelectRandomRequest();
//    call proc_Seq__Empty__ToZero___SelectRandomRequest();
//    call proc_Seq__Empty__FromZero___SelectRandomRequest();
//    call proc_Seq__Singleton__Length___SelectRandomRequest();
//    call proc_Seq__Build__Length___SelectRandomRequest();
//    call proc_Seq__Build__Index___SelectRandomRequest();
//    call proc_Seq__Append__Length___SelectRandomRequest();
//    call proc_Seq__Index__Singleton___SelectRandomRequest();
//    call proc_Seq__Append__Index___SelectRandomRequest();
//    call proc_Seq__Update__Length___SelectRandomRequest();
//    call proc_Seq__Index__Update___SelectRandomRequest();
//    call proc_Seq__Equal__Equiv___SelectRandomRequest();
//    call proc_Seq__Take__Length___SelectRandomRequest();
//    call proc_Seq__Take__Index___SelectRandomRequest();
//    call proc_Seq__Drop__Length___SelectRandomRequest();
//    call proc_Seq__Drop__Index___SelectRandomRequest();
//    call proc_Seq__Append__TakeDrop___SelectRandomRequest();
//    call proc_Seq__Update__CommuteTake1___SelectRandomRequest();
//    call proc_Seq__Update__CommuteTake2___SelectRandomRequest();
//    call proc_Seq__Update__CommuteDrop1___SelectRandomRequest();
//    call proc_Seq__Update__CommuteDrop2___SelectRandomRequest();
//    call proc_Seq__Build__CommuteDrop___SelectRandomRequest();
//    call proc_Seq__Take__Empty___SelectRandomRequest();
//    call proc_Seq__Drop__Empty___SelectRandomRequest();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___PrimeGenerationWorksheetRow();
//    call lemma_fun_ensures_fun_Seq__Length___PrimeGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___PrimeGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___PrimeGenerationWorksheetRow();
//    call proc_Seq__Empty__ToZero___PrimeGenerationWorksheetRow();
//    call proc_Seq__Empty__FromZero___PrimeGenerationWorksheetRow();
//    call proc_Seq__Singleton__Length___PrimeGenerationWorksheetRow();
//    call proc_Seq__Build__Length___PrimeGenerationWorksheetRow();
//    call proc_Seq__Build__Index___PrimeGenerationWorksheetRow();
//    call proc_Seq__Append__Length___PrimeGenerationWorksheetRow();
//    call proc_Seq__Index__Singleton___PrimeGenerationWorksheetRow();
//    call proc_Seq__Append__Index___PrimeGenerationWorksheetRow();
//    call proc_Seq__Update__Length___PrimeGenerationWorksheetRow();
//    call proc_Seq__Index__Update___PrimeGenerationWorksheetRow();
//    call proc_Seq__Equal__Equiv___PrimeGenerationWorksheetRow();
//    call proc_Seq__Take__Length___PrimeGenerationWorksheetRow();
//    call proc_Seq__Take__Index___PrimeGenerationWorksheetRow();
//    call proc_Seq__Drop__Length___PrimeGenerationWorksheetRow();
//    call proc_Seq__Drop__Index___PrimeGenerationWorksheetRow();
//    call proc_Seq__Append__TakeDrop___PrimeGenerationWorksheetRow();
//    call proc_Seq__Update__CommuteTake1___PrimeGenerationWorksheetRow();
//    call proc_Seq__Update__CommuteTake2___PrimeGenerationWorksheetRow();
//    call proc_Seq__Update__CommuteDrop1___PrimeGenerationWorksheetRow();
//    call proc_Seq__Update__CommuteDrop2___PrimeGenerationWorksheetRow();
//    call proc_Seq__Build__CommuteDrop___PrimeGenerationWorksheetRow();
//    call proc_Seq__Take__Empty___PrimeGenerationWorksheetRow();
//    call proc_Seq__Drop__Empty___PrimeGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_fun_ensures_fun_Seq__Length___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___RSAKeyGenerationWorksheetRow();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Empty__ToZero___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Empty__FromZero___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Singleton__Length___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Build__Length___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Build__Index___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Append__Length___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Index__Singleton___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Append__Index___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Update__Length___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Index__Update___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Equal__Equiv___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Take__Length___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Take__Index___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Drop__Length___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Drop__Index___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Append__TakeDrop___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Update__CommuteTake1___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Update__CommuteTake2___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Update__CommuteDrop1___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Update__CommuteDrop2___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Build__CommuteDrop___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Take__Empty___RSAKeyGenerationWorksheetRow();
//    call proc_Seq__Drop__Empty___RSAKeyGenerationWorksheetRow();
//    call lemma_fun_ensures_fun_Width();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___sub_Problem();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___sub_Problem();
//    call lemma_fun_ensures_fun_Seq__Length___sub_Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___sub_Problem();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___sub_Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___sub_Problem();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___sub_Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___sub_Problem();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___sub_Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___sub_Problem();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___sub_Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___sub_Problem();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___sub_Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___sub_Problem();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___sub_Problem();
//    call proc_Seq__Empty__ToZero___sub_Problem();
//    call proc_Seq__Empty__FromZero___sub_Problem();
//    call proc_Seq__Singleton__Length___sub_Problem();
//    call proc_Seq__Build__Length___sub_Problem();
//    call proc_Seq__Build__Index___sub_Problem();
//    call proc_Seq__Append__Length___sub_Problem();
//    call proc_Seq__Index__Singleton___sub_Problem();
//    call proc_Seq__Append__Index___sub_Problem();
//    call proc_Seq__Update__Length___sub_Problem();
//    call proc_Seq__Index__Update___sub_Problem();
//    call proc_Seq__Equal__Equiv___sub_Problem();
//    call proc_Seq__Take__Length___sub_Problem();
//    call proc_Seq__Take__Index___sub_Problem();
//    call proc_Seq__Drop__Length___sub_Problem();
//    call proc_Seq__Drop__Index___sub_Problem();
//    call proc_Seq__Append__TakeDrop___sub_Problem();
//    call proc_Seq__Update__CommuteTake1___sub_Problem();
//    call proc_Seq__Update__CommuteTake2___sub_Problem();
//    call proc_Seq__Update__CommuteDrop1___sub_Problem();
//    call proc_Seq__Update__CommuteDrop2___sub_Problem();
//    call proc_Seq__Build__CommuteDrop___sub_Problem();
//    call proc_Seq__Take__Empty___sub_Problem();
//    call proc_Seq__Drop__Empty___sub_Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___BigNat();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___BigNat();
//    call lemma_fun_ensures_fun_Seq__Length___BigNat();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___BigNat();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___BigNat();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___BigNat();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___BigNat();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___BigNat();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___BigNat();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___BigNat();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___BigNat();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___BigNat();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___BigNat();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___BigNat();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___BigNat();
//    call proc_Seq__Empty__ToZero___BigNat();
//    call proc_Seq__Empty__FromZero___BigNat();
//    call proc_Seq__Singleton__Length___BigNat();
//    call proc_Seq__Build__Length___BigNat();
//    call proc_Seq__Build__Index___BigNat();
//    call proc_Seq__Append__Length___BigNat();
//    call proc_Seq__Index__Singleton___BigNat();
//    call proc_Seq__Append__Index___BigNat();
//    call proc_Seq__Update__Length___BigNat();
//    call proc_Seq__Index__Update___BigNat();
//    call proc_Seq__Equal__Equiv___BigNat();
//    call proc_Seq__Take__Length___BigNat();
//    call proc_Seq__Take__Index___BigNat();
//    call proc_Seq__Drop__Length___BigNat();
//    call proc_Seq__Drop__Index___BigNat();
//    call proc_Seq__Append__TakeDrop___BigNat();
//    call proc_Seq__Update__CommuteTake1___BigNat();
//    call proc_Seq__Update__CommuteTake2___BigNat();
//    call proc_Seq__Update__CommuteDrop1___BigNat();
//    call proc_Seq__Update__CommuteDrop2___BigNat();
//    call proc_Seq__Build__CommuteDrop___BigNat();
//    call proc_Seq__Take__Empty___BigNat();
//    call proc_Seq__Drop__Empty___BigNat();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___Problem();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___Problem();
//    call lemma_fun_ensures_fun_Seq__Length___Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___Problem();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___Problem();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___Problem();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___Problem();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___Problem();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___Problem();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___Problem();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___Problem();
//    call proc_Seq__Empty__ToZero___Problem();
//    call proc_Seq__Empty__FromZero___Problem();
//    call proc_Seq__Singleton__Length___Problem();
//    call proc_Seq__Build__Length___Problem();
//    call proc_Seq__Build__Index___Problem();
//    call proc_Seq__Append__Length___Problem();
//    call proc_Seq__Index__Singleton___Problem();
//    call proc_Seq__Append__Index___Problem();
//    call proc_Seq__Update__Length___Problem();
//    call proc_Seq__Index__Update___Problem();
//    call proc_Seq__Equal__Equiv___Problem();
//    call proc_Seq__Take__Length___Problem();
//    call proc_Seq__Take__Index___Problem();
//    call proc_Seq__Drop__Length___Problem();
//    call proc_Seq__Drop__Index___Problem();
//    call proc_Seq__Append__TakeDrop___Problem();
//    call proc_Seq__Update__CommuteTake1___Problem();
//    call proc_Seq__Update__CommuteTake2___Problem();
//    call proc_Seq__Update__CommuteDrop1___Problem();
//    call proc_Seq__Update__CommuteDrop2___Problem();
//    call proc_Seq__Build__CommuteDrop___Problem();
//    call proc_Seq__Take__Empty___Problem();
//    call proc_Seq__Drop__Empty___Problem();
//    call lemma_unroll_rec_fun_CanonicalizeSeq__def();
//    call lemma_unroll_fun_CanonicalizeSeq__def();
//    call lemma_fun_ensures_fun_CanonicalizeSeq();
//    call lemma_fun_ensures_fun_IsZeroValue();
//    call lemma_fun_ensures_fun_SelectDigits();
//    call lemma_unroll_rec_fun____HASH_MaxLen__def__FULL();
//    call lemma_unroll_fun____HASH_MaxLen__def__FULL();
//    call lemma_fun_ensures_fun_MaxLen();
//    call lemma_fun_ensures_fun_MaxLen3();
//    call lemma_fun_ensures_fun_ArrayDigitAt();
//    call lemma_fun_ensures_fun_ArrayDigitAt__add();
//    call lemma_fun_ensures_fun_ArrayDigitAt__sub();
//    call lemma_fun_ensures_fun_ArrayDigitAt__cmp();
//    call lemma_fun_ensures_fun_ArrayDigitAt__mul();
//    call lemma_fun_ensures_fun_J();
//    call lemma_unroll_rec_fun____HASH_Seq__Length__FULL___MulRow();
//    call lemma_unroll_fun____HASH_Seq__Length__FULL___MulRow();
//    call lemma_fun_ensures_fun_Seq__Length___MulRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Build__FULL___MulRow();
//    call lemma_unroll_fun____HASH_Seq__Build__FULL___MulRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Index__FULL___MulRow();
//    call lemma_unroll_fun____HASH_Seq__Index__FULL___MulRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Append__FULL___MulRow();
//    call lemma_unroll_fun____HASH_Seq__Append__FULL___MulRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Update__FULL___MulRow();
//    call lemma_unroll_fun____HASH_Seq__Update__FULL___MulRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Take__FULL___MulRow();
//    call lemma_unroll_fun____HASH_Seq__Take__FULL___MulRow();
//    call lemma_unroll_rec_fun____HASH_Seq__Drop__FULL___MulRow();
//    call lemma_unroll_fun____HASH_Seq__Drop__FULL___MulRow();
//    call proc_Seq__Empty__ToZero___MulRow();
//    call proc_Seq__Empty__FromZero___MulRow();
//    call proc_Seq__Singleton__Length___MulRow();
//    call proc_Seq__Build__Length___MulRow();
//    call proc_Seq__Build__Index___MulRow();
//    call proc_Seq__Append__Length___MulRow();
//    call proc_Seq__Index__Singleton___MulRow();
//    call proc_Seq__Append__Index___MulRow();
//    call proc_Seq__Update__Length___MulRow();
//    call proc_Seq__Index__Update___MulRow();
//    call proc_Seq__Equal__Equiv___MulRow();
//    call proc_Seq__Take__Length___MulRow();
//    call proc_Seq__Take__Index___MulRow();
//    call proc_Seq__Drop__Length___MulRow();
//    call proc_Seq__Drop__Index___MulRow();
//    call proc_Seq__Append__TakeDrop___MulRow();
//    call proc_Seq__Update__CommuteTake1___MulRow();
//    call proc_Seq__Update__CommuteTake2___MulRow();
//    call proc_Seq__Update__CommuteDrop1___MulRow();
//    call proc_Seq__Update__CommuteDrop2___MulRow();
//    call proc_Seq__Build__CommuteDrop___MulRow();
//    call proc_Seq__Take__Empty___MulRow();
//    call proc_Seq__Drop__Empty___MulRow();

    //- Standard variable propagation
    r := r_old;
    stk := stk_old;
    statics := statics_old;
    io := io_old;
    mems := mems_old;
    $commonVars := $commonVars_old;
    $gcVars := $gcVars_old;
    $toAbs := $toAbs_old;
    $absMem := $absMem_old;
    $stacksFrames := $stacksFrames_old;
    objLayouts := objLayouts_old;
    heap := heap_old; 

    //- Alignment triggers
    assert TV(r.regs[ESP]);
    assert TO(0 - 1);
    assert TO(279552 - 1);
    assert TO(0);
    assert TO(279552);
    assert TO(1);
    assert TO(279553);
    assert TO(2);
    assert TO(279554);
    assert TO(3);
    assert TO(279555);
    assert TO(4);
    assert TO(279556);
    assert TO(5);
    assert TO(279557);
    assert TO(6);
    assert TO(279558);

    call proc_lemma__mod__properties();
    call proc_lemma__2toX();
    call proc_lemma__word32__Word32();
    call reveal_WORD_HI();

    call eax := Load(stk, esp + 12);  //- grab aj
    assert eax == $ghost_aj;

    call edx := Load(stk, esp + 16);  //- grab bv
    assert edx == $ghost_bv;

    call edx, eax := Mul64(eax, edx);
    $ghost_mhi := edx;
    $ghost_mlo := eax;
    call reveal_wrap32($ghost_aj * $ghost_bv);
    assert TVM($ghost_aj, $ghost_bv);
    assert TVD($ghost_aj * $ghost_bv, 0x100000000);
    call proc_lemma__asm__Mul64($ghost_aj, $ghost_bv, $ghost_mhi, $ghost_mlo);

    call ebx := Load(stk, esp + 24);  //- grab last carry
    assert ebx == $ghost_lastcarry;

    //- add1 (needs to be a direct call to instr_Add to bypass overflow check in logical add
    call r := instr_Add(r, EAX, OReg(EBX));  //- eax == mlo + lastcarry
    $ghost_add1 := eax;

    call reveal_wrap32($ghost_mlo + $ghost_lastcarry);
    $ghost_carry1 := if $ghost_add1 < $ghost_lastcarry then 1 else 0;
    assert if Cf(r.efl) then $ghost_carry1 == 1 else $ghost_carry1 == 0;
    call proc_lemma__asm__Add__properties($ghost_mlo, $ghost_lastcarry, $ghost_add1, $ghost_carry1);

    //- Add the carry bit to mhi
    call r := instr_AddCarry(r, EDX, OConst(0));   
    call reveal_wrap32($ghost_mhi + $ghost_carry1);
    assert edx == $ghost_mhi + $ghost_carry1;
    assert !Cf(r.efl);
    
    call ebx := Load(stk, esp + 20);  //- grab last cj
    assert eax == wrap32($ghost_mlo + $ghost_lastcarry);
    assert ebx == $ghost_lastcj;
    call eax := AddCarry(eax, ebx);  //- eax == mlo + lastcarry + lastcj
    $ghost_newcj := eax;
    $ghost_carry2 := if (wrap32($ghost_mlo + $ghost_lastcarry) + $ghost_lastcj) >= 0x100000000 then 1 else 0;
    assert $ghost_newcj == wrap32(wrap32($ghost_mlo + $ghost_lastcarry) + $ghost_lastcj);

    //- Add the carry bit to mhi
    call r := instr_AddCarry(r, EDX, OConst(0));   
    //-call reveal_wrap32($ghost_mhi + $ghost_carry1 + $ghost_carry2);
    //-assert edx == $ghost_mhi + $ghost_carry1 + $ghost_carry2;
    assert edx == wrap32($ghost_mhi + $ghost_carry1 + $ghost_carry2);

    //- Write back the results
    $ghost_newcj := eax;
    $ghost_newcarry := edx;
    call Store(inout stk, esp+4, eax);
    call Store(inout stk, esp+8, edx);

//    call proc_lemma__FleetNatMul__one__element__properties(4294967296, $ghost_aj, $ghost_bv, $ghost_mhi, $ghost_mlo, $ghost_lastcarry, $ghost_add1, $ghost_carry1, $ghost_lastcj, $ghost_newcj, $ghost_carry2, $ghost_add3, $ghost_carry3, $ghost_newcarry, $ghost_carry4);

    assert $ghost_carry2 == if (wrap32($ghost_mlo + $ghost_lastcarry) + $ghost_lastcj) >= 0x100000000 then 1 else 0;
    call reveal_wrap32($ghost_mlo + $ghost_lastcarry);
    assert $ghost_carry2 == if (($ghost_mlo + $ghost_lastcarry) mod 0x100000000 + $ghost_lastcj) >= 0x100000000 then 1 else 0;
    assert $ghost_newcj == wrap32(wrap32($ghost_mlo + $ghost_lastcarry) + $ghost_lastcj);
    assert $ghost_newcj == wrap32(($ghost_mlo + $ghost_lastcarry) mod 0x100000000 + $ghost_lastcj);
    call reveal_wrap32(($ghost_mlo + $ghost_lastcarry) mod 0x100000000 + $ghost_lastcj);
    assert $ghost_newcj == (($ghost_mlo + $ghost_lastcarry) mod 0x100000000+ $ghost_lastcj) mod 0x100000000;

    assert $ghost_newcarry == wrap32($ghost_mhi + $ghost_carry1 + $ghost_carry2);
    call reveal_wrap32($ghost_mhi + $ghost_carry1 + $ghost_carry2);
    assert $ghost_newcarry == ($ghost_mhi + $ghost_carry1 + $ghost_carry2) mod 0x100000000;
    
    Return;
}
}
