//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//

axiom (forall $MemVars:_ ::
MemSepInv($MemVars) ==
(
    (forall i:int::{$Mem[i]}{$sMem[i]} sAddr(i) ==> $Mem[i] == $sMem[i])
 && (forall i:int::{$Mem[i]}{$dMem[i]} dAddr(i) ==> $Mem[i] == $dMem[i])
 && (forall i:int::{$Mem[i]}{$pciMem[i]} pciAddr(i) ==> $Mem[i] == $pciMem[i])
 && (forall i:int::{$Mem[i]}{$gcMem[i]} gcAddr(i) ==> $Mem[i] == $gcMem[i])
 && (forall s:int, i:int::{$fMems[s][i]} fAddr(s, i) ==> $Mem[i] == $fMems[s][i])
 && (forall s:int, i:int::{$tMems[s][i]} tAddr(s, i) ==> $Mem[i] == $tMems[s][i])
));

implementation initSeparation()
{
  $sMem := $Mem;
  $dMem := $Mem;
  $pciMem := $Mem;
  $gcMem := $Mem;
  $tMems := MapStacksToMem($Mem);
  $fMems := MapStacksToMem($Mem);
  SLo := ecx;
  assert TV(ecx) && TO(256);
  call ecx := AddChecked(ecx, 1024);
  DLo := ecx;
  assert TV(ecx) && TO(256);
  call ecx := AddChecked(ecx, 1024);
  PciLo := ecx;
  assert TV(ecx) && TO(2 * 65536);
  call ecx := AddChecked(ecx, 0x80000);
  TLo := ecx;
  assert TV(ecx) && TO(4096);
  call ecx := AddChecked(ecx, 16384);
  FLo := ecx;
  assert TV(ecx) && TO(273920);
  call ecx := AddChecked(ecx, 1095680);
  GcLo := ecx;
  GcHi := edx;
  if (ecx > edx)
  {
    eax := 0x55550010;
    call debugBreak();
  }

assert    MemSepInv($MemVars);
 assert ?gcLo <= ?gcHi;
 assert Aligned(?sLo);
 assert Aligned(?dLo);
 assert Aligned(?pciLo);
 assert Aligned(?tLo);
 assert Aligned(?fLo);
 assert Aligned(?gcLo);
 assert Aligned(?gcHi);
 assert SLo == ?sLo;
 assert DLo == ?dLo;
 assert PciLo == ?pciLo;
 assert TLo == ?tLo;
 assert FLo == ?fLo;
 assert GcLo == ?gcLo;
 assert GcHi == ?gcHi;

}

implementation sLoad($ptr:int)
{
}

implementation sStore($ptr:int, $val:int)
{
  $sMem[$ptr] := $val;
}

implementation dLoad($ptr:int)
{
}

implementation dStore($ptr:int, $val:int)
{
  $dMem[$ptr] := $val;
}

implementation pciLoad($ptr:int)
{
}

implementation pciStore($ptr:int, $val:int)
{
  $pciMem[$ptr] := $val;
}

implementation gcLoad($ptr:int)
{
}

implementation gcStore($ptr:int, $val:int)
{
  $gcMem[$ptr] := $val;
}

implementation fLoad($s:int, $ptr:int)
{
}

implementation fStore($s:int, $ptr:int, $val:int)
{
  $fMems := $fMems[$s := $fMems[$s][$ptr := $val]];
}

implementation tLoad($s:int, $ptr:int)
{
}

implementation tStore($s:int, $ptr:int, $val:int)
{
  $tMems := $tMems[$s := $tMems[$s][$ptr := $val]];
}

implementation revealFMem()
{
}

implementation _call()
{
  $sMem[esp - 4] := NextEip($Eip);
}

implementation _ret($oldMem:[int]int, $oldSMem:[int]int, $oldDMem:[int]int, $oldPciMem:[int]int, $oldTMem:[int][int]int, $oldFMem:[int][int]int, $oldGcMem:[int]int)
{
}

implementation _fret($s:int, $oldMem:[int]int, $oldSMem:[int]int, $oldDMem:[int]int, $oldPciMem:[int]int, $oldTMem:[int][int]int, $oldFMem:[int][int]int, $oldGcMem:[int]int)
{
}
