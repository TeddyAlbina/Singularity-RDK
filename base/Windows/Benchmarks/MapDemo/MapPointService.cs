// ----------------------------------------------------------------------------
//
//  Copyright (c) Microsoft Corporation.  All rights reserved.
//
// ----------------------------------------------------------------------------

ï»¿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.2032.
// 
namespace mapdemo.MapPointService
{
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CommonServiceSoap", Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MapPointConstants))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindResult[]))]
    public class CommonServiceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public CustomerInfoHeader CustomerInfoHeaderValue;
        
        public UserInfoHeader UserInfoHeaderValue;
        
        /// <remarks/>
        public CommonServiceSoap() {
            this.Url = "http://findv3.staging.mappoint.net/Find-30/Common.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/GetVersionInfo", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VersionInfo[] GetVersionInfo() {
            object[] results = this.Invoke("GetVersionInfo", new object[0]);
            return ((VersionInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVersionInfo(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVersionInfo", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public VersionInfo[] EndGetVersionInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VersionInfo[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/GetCountryRegionInfo", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CountryRegionInfo[] GetCountryRegionInfo(int[] entityIDs) {
            object[] results = this.Invoke("GetCountryRegionInfo", new object[] {
                        entityIDs});
            return ((CountryRegionInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCountryRegionInfo(int[] entityIDs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCountryRegionInfo", new object[] {
                        entityIDs}, callback, asyncState);
        }
        
        /// <remarks/>
        public CountryRegionInfo[] EndGetCountryRegionInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CountryRegionInfo[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/GetEntityTypes", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EntityType[] GetEntityTypes(string dataSourceName) {
            object[] results = this.Invoke("GetEntityTypes", new object[] {
                        dataSourceName});
            return ((EntityType[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEntityTypes(string dataSourceName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEntityTypes", new object[] {
                        dataSourceName}, callback, asyncState);
        }
        
        /// <remarks/>
        public EntityType[] EndGetEntityTypes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EntityType[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/GetDataSourceInfo", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DataSource[] GetDataSourceInfo(string[] dataSourceNames) {
            object[] results = this.Invoke("GetDataSourceInfo", new object[] {
                        dataSourceNames});
            return ((DataSource[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataSourceInfo(string[] dataSourceNames, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataSourceInfo", new object[] {
                        dataSourceNames}, callback, asyncState);
        }
        
        /// <remarks/>
        public DataSource[] EndGetDataSourceInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DataSource[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/GetGreatCircleDistances", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Double[] GetGreatCircleDistances(LatLong[] latLongs) {
            object[] results = this.Invoke("GetGreatCircleDistances", new object[] {
                        latLongs});
            return ((System.Double[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGreatCircleDistances(LatLong[] latLongs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGreatCircleDistances", new object[] {
                        latLongs}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Double[] EndGetGreatCircleDistances(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Double[])(results[0]));
        }
    }
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FindServiceSoap", Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MapPointConstants))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindResult[]))]
    public class FindServiceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public CustomerInfoFindHeader CustomerInfoFindHeaderValue;
        
        public UserInfoFindHeader UserInfoFindHeaderValue;
        
        /// <remarks/>
        public FindServiceSoap() {
            this.Url = "http://findv3.staging.mappoint.net/Find-30/FindService.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/Find", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults Find(FindSpecification specification) {
            object[] results = this.Invoke("Find", new object[] {
                        specification});
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFind(FindSpecification specification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Find", new object[] {
                        specification}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResults EndFind(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/FindAddress", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindAddress(FindAddressSpecification specification) {
            object[] results = this.Invoke("FindAddress", new object[] {
                        specification});
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindAddress(FindAddressSpecification specification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindAddress", new object[] {
                        specification}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResults EndFindAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/ParseAddress", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Address ParseAddress(string inputAddress, string countryRegion) {
            object[] results = this.Invoke("ParseAddress", new object[] {
                        inputAddress,
                        countryRegion});
            return ((Address)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginParseAddress(string inputAddress, string countryRegion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ParseAddress", new object[] {
                        inputAddress,
                        countryRegion}, callback, asyncState);
        }
        
        /// <remarks/>
        public Address EndParseAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Address)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/GetLocationInfo", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Location[] GetLocationInfo(LatLong location, string dataSourceName, GetInfoOptions options) {
            object[] results = this.Invoke("GetLocationInfo", new object[] {
                        location,
                        dataSourceName,
                        options});
            return ((Location[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLocationInfo(LatLong location, string dataSourceName, GetInfoOptions options, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLocationInfo", new object[] {
                        location,
                        dataSourceName,
                        options}, callback, asyncState);
        }
        
        /// <remarks/>
        public Location[] EndGetLocationInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Location[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/FindNearby", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindNearby(FindNearbySpecification specification) {
            object[] results = this.Invoke("FindNearby", new object[] {
                        specification});
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindNearby(FindNearbySpecification specification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindNearby", new object[] {
                        specification}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResults EndFindNearby(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/FindByProperty", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindByProperty(FindByPropertySpecification specification) {
            object[] results = this.Invoke("FindByProperty", new object[] {
                        specification});
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindByProperty(FindByPropertySpecification specification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindByProperty", new object[] {
                        specification}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResults EndFindByProperty(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/FindByID", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindByID(FindByIDSpecification specification) {
            object[] results = this.Invoke("FindByID", new object[] {
                        specification});
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindByID(FindByIDSpecification specification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindByID", new object[] {
                        specification}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResults EndFindByID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoFindHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/FindNearRoute", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResults FindNearRoute(FindNearRouteSpecification specification) {
            object[] results = this.Invoke("FindNearRoute", new object[] {
                        specification});
            return ((FindResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindNearRoute(FindNearRouteSpecification specification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindNearRoute", new object[] {
                        specification}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResults EndFindNearRoute(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResults)(results[0]));
        }
    }
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RouteServiceSoap", Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MapPointConstants))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindResult[]))]
    public class RouteServiceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public CustomerInfoRouteHeader CustomerInfoRouteHeaderValue;
        
        public UserInfoRouteHeader UserInfoRouteHeaderValue;
        
        /// <remarks/>
        public RouteServiceSoap() {
            this.Url = "http://routev3.staging.mappoint.net/Route-30/RouteService.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoRouteHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoRouteHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/CalculateSimpleRoute", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Route CalculateSimpleRoute(LatLong[] latLongs, string dataSourceName, SegmentPreference preference) {
            object[] results = this.Invoke("CalculateSimpleRoute", new object[] {
                        latLongs,
                        dataSourceName,
                        preference});
            return ((Route)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCalculateSimpleRoute(LatLong[] latLongs, string dataSourceName, SegmentPreference preference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CalculateSimpleRoute", new object[] {
                        latLongs,
                        dataSourceName,
                        preference}, callback, asyncState);
        }
        
        /// <remarks/>
        public Route EndCalculateSimpleRoute(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Route)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoRouteHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoRouteHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/CalculateRoute", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Route CalculateRoute(RouteSpecification specification) {
            object[] results = this.Invoke("CalculateRoute", new object[] {
                        specification});
            return ((Route)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCalculateRoute(RouteSpecification specification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CalculateRoute", new object[] {
                        specification}, callback, asyncState);
        }
        
        /// <remarks/>
        public Route EndCalculateRoute(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Route)(results[0]));
        }
    }
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RenderServiceSoap", Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MapPointConstants))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FindResult[]))]
    public class RenderServiceSoap : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        public CustomerInfoRenderHeader CustomerInfoRenderHeaderValue;
        
        public UserInfoRenderHeader UserInfoRenderHeaderValue;
        
        /// <remarks/>
        public RenderServiceSoap() {
            this.Url = "http://renderv3.staging.mappoint.net/Render-30/RenderService.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/GetMap", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapImage[] GetMap(MapSpecification specification) {
            object[] results = this.Invoke("GetMap", new object[] {
                        specification});
            return ((MapImage[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMap(MapSpecification specification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMap", new object[] {
                        specification}, callback, asyncState);
        }
        
        /// <remarks/>
        public MapImage[] EndGetMap(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MapImage[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/ConvertToPoint", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PixelCoord[] ConvertToPoint(LatLong[] latLong, MapView view, int width, int height) {
            object[] results = this.Invoke("ConvertToPoint", new object[] {
                        latLong,
                        view,
                        width,
                        height});
            return ((PixelCoord[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConvertToPoint(LatLong[] latLong, MapView view, int width, int height, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertToPoint", new object[] {
                        latLong,
                        view,
                        width,
                        height}, callback, asyncState);
        }
        
        /// <remarks/>
        public PixelCoord[] EndConvertToPoint(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PixelCoord[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/ConvertToLatLong", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LatLong[] ConvertToLatLong(PixelCoord[] pixels, MapView view, int width, int height) {
            object[] results = this.Invoke("ConvertToLatLong", new object[] {
                        pixels,
                        view,
                        width,
                        height});
            return ((LatLong[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConvertToLatLong(PixelCoord[] pixels, MapView view, int width, int height, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertToLatLong", new object[] {
                        pixels,
                        view,
                        width,
                        height}, callback, asyncState);
        }
        
        /// <remarks/>
        public LatLong[] EndConvertToLatLong(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LatLong[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("CustomerInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserInfoRenderHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://s.mappoint.net/mappoint-30/GetBestMapView", RequestNamespace="http://s.mappoint.net/mappoint-30/", ResponseNamespace="http://s.mappoint.net/mappoint-30/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MapViewRepresentations GetBestMapView(Location[] locations, string dataSourceName) {
            object[] results = this.Invoke("GetBestMapView", new object[] {
                        locations,
                        dataSourceName});
            return ((MapViewRepresentations)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBestMapView(Location[] locations, string dataSourceName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBestMapView", new object[] {
                        locations,
                        dataSourceName}, callback, asyncState);
        }
        
        /// <remarks/>
        public MapViewRepresentations EndGetBestMapView(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MapViewRepresentations)(results[0]));
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://s.mappoint.net/mappoint-30/", IsNullable=false)]
    public class CustomerInfoRenderHeader : CustomerInfoHeader {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://s.mappoint.net/mappoint-30/", IsNullable=false)]
    public class UserInfoRouteHeader : UserInfoHeader {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://s.mappoint.net/mappoint-30/", IsNullable=false)]
    public class CustomerInfoRouteHeader : CustomerInfoHeader {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://s.mappoint.net/mappoint-30/", IsNullable=false)]
    public class UserInfoRenderHeader : UserInfoHeader {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserInfoRenderHeader))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserInfoFindHeader))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserInfoRouteHeader))]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://s.mappoint.net/mappoint-30/", IsNullable=false)]
    public class UserInfoHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public CultureInfo Culture;
        
        /// <remarks/>
        public DistanceUnit DefaultDistanceUnit;
        
        /// <remarks/>
        public CountryRegionContext Context;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class CultureInfo {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public int Lcid;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindAddressSpecification {
        
        /// <remarks/>
        public string DataSourceName;
        
        /// <remarks/>
        public Address InputAddress;
        
        /// <remarks/>
        public FindOptions Options;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class Address {
        
        /// <remarks/>
        public string AddressLine;
        
        /// <remarks/>
        public string PrimaryCity;
        
        /// <remarks/>
        public string SecondaryCity;
        
        /// <remarks/>
        public string Subdivision;
        
        /// <remarks/>
        public string PostalCode;
        
        /// <remarks/>
        public string CountryRegion;
        
        /// <remarks/>
        public string FormattedAddress;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindOptions {
        
        /// <remarks/>
        public FindRange Range;
        
        /// <remarks/>
        public int SearchContext;
        
        /// <remarks/>
        public FindResultMask ResultMask;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0.85)]
        public System.Double ThresholdScore = 0.85;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindRange {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int StartIndex = 0;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(25)]
        public int Count = 25;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.FlagsAttribute()]
    public enum FindResultMask {
        
        /// <remarks/>
        LatLongFlag = 1,
        
        /// <remarks/>
        EntityFlag = 2,
        
        /// <remarks/>
        AddressFlag = 4,
        
        /// <remarks/>
        BestMapViewFlag = 8,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindNearbySpecification {
        
        /// <remarks/>
        public string DataSourceName;
        
        /// <remarks/>
        public LatLong LatLong;
        
        /// <remarks/>
        public System.Double Distance;
        
        /// <remarks/>
        public FindFilter Filter;
        
        /// <remarks/>
        public FindOptions Options;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class LatLong {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public System.Double Latitude = 0;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public System.Double Longitude = 0;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindFilter {
        
        /// <remarks/>
        public string EntityTypeName;
        
        /// <remarks/>
        public string[] PropertyNames;
        
        /// <remarks/>
        public WhereClause WhereClause;
        
        /// <remarks/>
        public SortProperty[] SortProperties;
        
        /// <remarks/>
        public FilterExpression Expression;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class WhereClause {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Property")]
        public EntityPropertyValue[] SearchProperties;
        
        /// <remarks/>
        public SearchOperatorFlag SearchOperator;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class EntityPropertyValue {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public object Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum SearchOperatorFlag {
        
        /// <remarks/>
        And,
        
        /// <remarks/>
        Or,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class SortProperty {
        
        /// <remarks/>
        public string PropertyName;
        
        /// <remarks/>
        public SortDirection Direction;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum SortDirection {
        
        /// <remarks/>
        Ascending,
        
        /// <remarks/>
        Descending,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FilterExpression {
        
        /// <remarks/>
        public string Text;
        
        /// <remarks/>
        public object[] Parameters;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class MapPointConstants {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(6378.2)]
        public System.Double EarthRadiusInKilometers = 6378.2;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(3.1415926535897931)]
        public System.Double Pi = 3.1415926535897931;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0.017453292519943295)]
        public System.Double RadiansPerDegree = 0.017453292519943295;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(57.295779513082323)]
        public System.Double DegreesPerRadian = 57.295779513082323;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0.621371192237334)]
        public System.Double MilesPerKilometer = 0.621371192237334;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(1.609344)]
        public System.Double KilometersPerMile = 1.609344;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0.0003048)]
        public System.Double KilometersPerFoot = 0.0003048;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(3280.8398950131232)]
        public System.Double FeetPerKilometer = 3280.8398950131232;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0.85)]
        public System.Double FindScoreThreshold = 0.85;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(96)]
        public int AssumedDpi = 96;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(3.280839895013123)]
        public System.Double FeetPerMeter = 3.280839895013123;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0.3048)]
        public System.Double MetersPerFoot = 0.3048;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindByIDSpecification {
        
        /// <remarks/>
        public string DataSourceName;
        
        /// <remarks/>
        public FindFilter Filter;
        
        /// <remarks/>
        public FindOptions Options;
        
        /// <remarks/>
        public int[] EntityIDs;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindNearRouteSpecification {
        
        /// <remarks/>
        public string DataSourceName;
        
        /// <remarks/>
        public System.Double Distance;
        
        /// <remarks/>
        public FindFilter Filter;
        
        /// <remarks/>
        public FindOptions Options;
        
        /// <remarks/>
        public Route Route;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class Route {
        
        /// <remarks/>
        public RouteSpecification Specification;
        
        /// <remarks/>
        public RouteItinerary Itinerary;
        
        /// <remarks/>
        public CalculatedRouteRepresentation CalculatedRepresentation;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class RouteSpecification {
        
        /// <remarks/>
        public SegmentSpecification[] Segments;
        
        /// <remarks/>
        public RouteResultMask ResultMask;
        
        /// <remarks/>
        public string DataSourceName;
        
        /// <remarks/>
        public DriverProfile DriverProfile;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class SegmentSpecification {
        
        /// <remarks/>
        public Waypoint Waypoint;
        
        /// <remarks/>
        public SegmentOptions Options;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class Waypoint {
        
        /// <remarks/>
        public Location Location;
        
        /// <remarks/>
        public SnapType Snap;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public Location CalculatedLocation;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class Location {
        
        /// <remarks/>
        public LatLong LatLong;
        
        /// <remarks/>
        public Entity Entity;
        
        /// <remarks/>
        public Address Address;
        
        /// <remarks/>
        public MapViewRepresentations BestMapView;
        
        /// <remarks/>
        public string DataSourceName;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class Entity {
        
        /// <remarks/>
        public int ID;
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string DisplayName;
        
        /// <remarks/>
        public string TypeName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Property")]
        public EntityPropertyValue[] Properties;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class MapViewRepresentations {
        
        /// <remarks/>
        public ViewByScale ByScale;
        
        /// <remarks/>
        public ViewByHeightWidth ByHeightWidth;
        
        /// <remarks/>
        public ViewByBoundingRectangle ByBoundingRectangle;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class ViewByScale : MapView {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public System.Double MapScale = 0;
        
        /// <remarks/>
        public LatLong CenterPoint;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ViewByScale))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ViewByHeightWidth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ViewByBoundingRectangle))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ViewByBoundingLocations))]
    public abstract class MapView {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class ViewByHeightWidth : MapView {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public System.Double Height = 0;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public System.Double Width = 0;
        
        /// <remarks/>
        public LatLong CenterPoint;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class ViewByBoundingRectangle : MapView {
        
        /// <remarks/>
        public LatLongRectangle BoundingRectangle;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class LatLongRectangle {
        
        /// <remarks/>
        public LatLong Southwest;
        
        /// <remarks/>
        public LatLong Northeast;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class ViewByBoundingLocations : MapView {
        
        /// <remarks/>
        public Location[] Locations;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum SnapType {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        City,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class SegmentOptions {
        
        /// <remarks/>
        public SegmentPreference Preference;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CalculateSegmentMapView = true;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool CalculateDirectionMapView = true;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum SegmentPreference {
        
        /// <remarks/>
        Quickest,
        
        /// <remarks/>
        Shortest,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.FlagsAttribute()]
    public enum RouteResultMask {
        
        /// <remarks/>
        Itinerary = 1,
        
        /// <remarks/>
        CalculatedRouteRepresentation = 2,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class DriverProfile {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int DayStartTime = -1;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(-1)]
        public int DayEndTime = -1;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class RouteItinerary {
        
        /// <remarks/>
        public Segment[] Segments;
        
        /// <remarks/>
        public long TripTime;
        
        /// <remarks/>
        public long DrivingTime;
        
        /// <remarks/>
        public System.Double Distance;
        
        /// <remarks/>
        public MapViewRepresentations View;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class Segment {
        
        /// <remarks/>
        public Waypoint Waypoint;
        
        /// <remarks/>
        public Direction[] Directions;
        
        /// <remarks/>
        public long TripTime;
        
        /// <remarks/>
        public long DrivingTime;
        
        /// <remarks/>
        public System.Double Distance;
        
        /// <remarks/>
        public MapViewRepresentations View;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class Direction {
        
        /// <remarks/>
        public LatLong LatLong;
        
        /// <remarks/>
        public DirectionType DirectionType;
        
        /// <remarks/>
        public DirectionAction Action;
        
        /// <remarks/>
        public System.Single BearingOutOfTurn;
        
        /// <remarks/>
        public System.Single BearingIntoTurn;
        
        /// <remarks/>
        public long Duration;
        
        /// <remarks/>
        public System.Double Distance;
        
        /// <remarks/>
        public string Towards;
        
        /// <remarks/>
        public string Instruction;
        
        /// <remarks/>
        public string FormattedInstruction;
        
        /// <remarks/>
        public int ID;
        
        /// <remarks/>
        public MapViewRepresentations View;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum DirectionType {
        
        /// <remarks/>
        Driving,
        
        /// <remarks/>
        Border,
        
        /// <remarks/>
        StartOfDay,
        
        /// <remarks/>
        EndOfDay,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Waypoint,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum DirectionAction {
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Depart,
        
        /// <remarks/>
        Arrive,
        
        /// <remarks/>
        TurnLeft,
        
        /// <remarks/>
        TurnRight,
        
        /// <remarks/>
        BearLeft,
        
        /// <remarks/>
        BearRight,
        
        /// <remarks/>
        Merge,
        
        /// <remarks/>
        Continue,
        
        /// <remarks/>
        TurnBack,
        
        /// <remarks/>
        TakeRoundabout,
        
        /// <remarks/>
        ConstructionDelay,
        
        /// <remarks/>
        ConstructionStop,
        
        /// <remarks/>
        NameChange,
        
        /// <remarks/>
        LeftLeft,
        
        /// <remarks/>
        LeftRight,
        
        /// <remarks/>
        RightLeft,
        
        /// <remarks/>
        RightRight,
        
        /// <remarks/>
        TakeRamp,
        
        /// <remarks/>
        TakeRampLeft,
        
        /// <remarks/>
        TakeRampRight,
        
        /// <remarks/>
        KeepStraight,
        
        /// <remarks/>
        KeepLeft,
        
        /// <remarks/>
        KeepRight,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class CalculatedRouteRepresentation {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] Bits;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindByPropertySpecification {
        
        /// <remarks/>
        public string DataSourceName;
        
        /// <remarks/>
        public FindFilter Filter;
        
        /// <remarks/>
        public FindOptions Options;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class GetInfoOptions {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IncludeAddresses = true;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool IncludeAllEntityTypes = true;
        
        /// <remarks/>
        public string[] EntityTypesToReturn;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class MimeData {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] Bits;
        
        /// <remarks/>
        public string ContentID;
        
        /// <remarks/>
        public string MimeType;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class PixelRectangle {
        
        /// <remarks/>
        public int Bottom;
        
        /// <remarks/>
        public int Left;
        
        /// <remarks/>
        public int Right;
        
        /// <remarks/>
        public int Top;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class HotArea {
        
        /// <remarks/>
        public PixelRectangle IconRectangle;
        
        /// <remarks/>
        public PixelRectangle LabelRectangle;
        
        /// <remarks/>
        public string PinID;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class MapImage {
        
        /// <remarks/>
        public HotArea[] HotAreas;
        
        /// <remarks/>
        public MimeData MimeData;
        
        /// <remarks/>
        public MapViewRepresentations View;
        
        /// <remarks/>
        public string Url;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class PixelCoord {
        
        /// <remarks/>
        public int X;
        
        /// <remarks/>
        public int Y;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class Pushpin {
        
        /// <remarks/>
        public string IconDataSource;
        
        /// <remarks/>
        public string IconName;
        
        /// <remarks/>
        public string Label;
        
        /// <remarks/>
        public LatLong LatLong;
        
        /// <remarks/>
        public string PinID;
        
        /// <remarks/>
        public PixelCoord Pixel;
        
        /// <remarks/>
        public bool ReturnsHotArea;
        
        /// <remarks/>
        public bool LabelNearbyRoads;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class ImageFormat {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute("image/gif")]
        public string MimeType = "image/gif";
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(240)]
        public int Height = 240;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(296)]
        public int Width = 296;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class MapOptions {
        
        /// <remarks/>
        public RouteHighlightColor RouteHighlightColor;
        
        /// <remarks/>
        public RouteHighlightColor ConstructionDelayHighlightColor;
        
        /// <remarks/>
        public RouteHighlightColor ConstructionClosureHighlightColor;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(MapFontSize.Smaller)]
        public MapFontSize FontSize = MapFontSize.Smaller;
        
        /// <remarks/>
        public ImageFormat Format;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool IsOverviewMap = false;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(MapReturnType.ReturnImage)]
        public MapReturnType ReturnType = MapReturnType.ReturnImage;
        
        /// <remarks/>
        public System.Double PanHorizontal;
        
        /// <remarks/>
        public System.Double PanVertical;
        
        /// <remarks/>
        public MapStyle Style;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(1)]
        public System.Double Zoom = 1;
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool PreventIconCollisions = false;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum RouteHighlightColor {
        
        /// <remarks/>
        DefaultColor,
        
        /// <remarks/>
        Green,
        
        /// <remarks/>
        Yellow,
        
        /// <remarks/>
        Cyan,
        
        /// <remarks/>
        Red,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum MapFontSize {
        
        /// <remarks/>
        Smallest,
        
        /// <remarks/>
        Smaller,
        
        /// <remarks/>
        Medium,
        
        /// <remarks/>
        Larger,
        
        /// <remarks/>
        Largest,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum MapReturnType {
        
        /// <remarks/>
        ReturnImage,
        
        /// <remarks/>
        ReturnUrl,
        
        /// <remarks/>
        ReturnSecureUrl,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum MapStyle {
        
        /// <remarks/>
        DefaultStyle,
        
        /// <remarks/>
        Locator,
        
        /// <remarks/>
        Terrain,
        
        /// <remarks/>
        Road,
        
        /// <remarks/>
        Political,
        
        /// <remarks/>
        Small,
        
        /// <remarks/>
        LocatorBW,
        
        /// <remarks/>
        TerrainBW,
        
        /// <remarks/>
        RoadBW,
        
        /// <remarks/>
        PoliticalBW,
        
        /// <remarks/>
        SmallBW,
        
        /// <remarks/>
        Comprehensive,
        
        /// <remarks/>
        PhysicalFeatures,
        
        /// <remarks/>
        Tectonic,
        
        /// <remarks/>
        EarthByDay,
        
        /// <remarks/>
        EarthByNight,
        
        /// <remarks/>
        Ecoregions,
        
        /// <remarks/>
        Climate,
        
        /// <remarks/>
        TemperatureJanuary,
        
        /// <remarks/>
        TemperatureJuly,
        
        /// <remarks/>
        PrecipitationJanuary,
        
        /// <remarks/>
        PrecipitationJuly,
        
        /// <remarks/>
        PrecipitationAnnual,
        
        /// <remarks/>
        Languages,
        
        /// <remarks/>
        Religions,
        
        /// <remarks/>
        PopulationDensity,
        
        /// <remarks/>
        Parks,
        
        /// <remarks/>
        TimeZones,
        
        /// <remarks/>
        Outline,
        
        /// <remarks/>
        Phone,
        
        /// <remarks/>
        PhoneBW,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class MapSpecification {
        
        /// <remarks/>
        public string DataSourceName;
        
        /// <remarks/>
        public int[] HighlightedEntityIDs;
        
        /// <remarks/>
        public string[] HideEntityTypes;
        
        /// <remarks/>
        public MapOptions Options;
        
        /// <remarks/>
        public Pushpin[] Pushpins;
        
        /// <remarks/>
        public Route Route;
        
        /// <remarks/>
        public MapView[] Views;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindResult {
        
        /// <remarks/>
        public System.Double Score;
        
        /// <remarks/>
        public Location FoundLocation;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindResults {
        
        /// <remarks/>
        public int NumberFound;
        
        /// <remarks/>
        public int StartIndex;
        
        /// <remarks/>
        public FindResult[] Results;
        
        /// <remarks/>
        public System.Double TopScore;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class FindSpecification {
        
        /// <remarks/>
        public string DataSourceName;
        
        /// <remarks/>
        public string InputPlace;
        
        /// <remarks/>
        public string[] EntityTypeNames;
        
        /// <remarks/>
        public FindOptions Options;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class DataSource {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string Version;
        
        /// <remarks/>
        public string Description;
        
        /// <remarks/>
        public DataSourceCapability Capability;
        
        /// <remarks/>
        public int[] EntityExtent;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.FlagsAttribute()]
    public enum DataSourceCapability {
        
        /// <remarks/>
        CanDrawMaps = 1,
        
        /// <remarks/>
        CanFindPlaces = 2,
        
        /// <remarks/>
        CanFindNearby = 4,
        
        /// <remarks/>
        CanRoute = 8,
        
        /// <remarks/>
        CanFindAddress = 16,
        
        /// <remarks/>
        HasIcons = 32,
        
        /// <remarks/>
        DataServiceQuery = 64,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class EntityProperty {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string DisplayName;
        
        /// <remarks/>
        public string DataType;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class EntityType {
        
        /// <remarks/>
        public string Name;
        
        /// <remarks/>
        public string DisplayName;
        
        /// <remarks/>
        public string ParentName;
        
        /// <remarks/>
        public string Definition;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Property")]
        public EntityProperty[] Properties;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class CountryRegionInfo {
        
        /// <remarks/>
        public int EntityID;
        
        /// <remarks/>
        public LatLong LatLong;
        
        /// <remarks/>
        public string Iso2;
        
        /// <remarks/>
        public string Iso3;
        
        /// <remarks/>
        public string FriendlyName;
        
        /// <remarks/>
        public string OfficialName;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class VersionInfo {
        
        /// <remarks/>
        public string Component;
        
        /// <remarks/>
        public string Version;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public class CountryRegionContext {
        
        /// <remarks/>
        [System.ComponentModel.DefaultValueAttribute(0)]
        public int EntityID = 0;
        
        /// <remarks/>
        public string Iso2;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    public enum DistanceUnit {
        
        /// <remarks/>
        Kilometer,
        
        /// <remarks/>
        Mile,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CustomerInfoRouteHeader))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CustomerInfoFindHeader))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CustomerInfoRenderHeader))]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://s.mappoint.net/mappoint-30/", IsNullable=false)]
    public class CustomerInfoHeader : System.Web.Services.Protocols.SoapHeader {
        
        /// <remarks/>
        public short CustomLogEntry;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://s.mappoint.net/mappoint-30/", IsNullable=false)]
    public class UserInfoFindHeader : UserInfoHeader {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://s.mappoint.net/mappoint-30/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://s.mappoint.net/mappoint-30/", IsNullable=false)]
    public class CustomerInfoFindHeader : CustomerInfoHeader {
    }
}
